name: CD

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: "${{matrix.os}}"

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest

    steps:
      - name: Additional macOS dependencies
        if: contains(matrix.os, 'macos')
        run: |
          brew install yq

      - name: Get runner environment
        id: runner
        uses: msansoni/runner-environment-action@v1

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Update version
        run: |
          yq eval -i ".version = \"${{ github.event.release.tag_name }}\"" shard.yml
          perl -pi -e 's/VERSION = ".*"/VERSION = "${{ github.event.release.tag_name }}"/g' src/version.cr

      - name: Install Crystal
        uses: crystal-lang/install-crystal@v1
        with:
          crystal: 1.2.1

      - name: Install shards
        run: shards install

      - name: Build
        if: contains(matrix.os, 'macos')
        run: shards build --release --no-debug

      - name: Build static
        if: contains(matrix.os, 'ubuntu')
        run: shards build --release --no-debug --static

      - name: Upload application
        id: upload
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./bin/watcher
          asset_name: watcher-${{ steps.runner.outputs.platform }}-${{steps.runner.outputs.arch}}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Update version
        run: |
          yq eval -i ".version = \"${{ github.event.release.tag_name }}\"" shard.yml
          perl -pi -e 's/VERSION = ".*"/VERSION = "${{ github.event.release.tag_name }}"/g' src/version.cr

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: boord/watcher:${{ github.event.release.tag_name }},boord/watcher:latest
          cache-from: type=registry,ref=boord/watcher:latest
          cache-to: type=inline

  helm:
    runs-on: ubuntu-latest

    needs: [docker]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Generate documentation
        run: |
          pip3 install frigate
          frigate gen --no-credits helm > helm/README.md

      - name: Helm package
        run: |
          helm package helm --version ${{ github.event.release.tag_name }} --app-version ${{ github.event.release.tag_name }}

      - name: Publish Helm Chart
        env:
          HELM_REPO_USERNAME: ${{ secrets.CHARTMUSEUM_USERNAME }}
          HELM_REPO_PASSWORD: ${{ secrets.CHARTMUSEUM_PASSWORD }}
        run: |
          helm plugin install https://github.com/chartmuseum/helm-push.git
          helm cm-push *.tgz ${{ secrets.CHARTMUSEUM_URL }}
